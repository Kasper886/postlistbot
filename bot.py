import asyncio
import os
from dotenv import load_dotenv
import html
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from telethon import TelegramClient


# ==== –¢–í–û–ò –î–ê–ù–ù–´–ï ====
load_dotenv()

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
SOURCE_CHANNEL = os.getenv("SOURCE_CHANNEL")
ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID"))
# ======================

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
client = TelegramClient("session", API_ID, API_HASH)

def is_authorized(message: Message) -> bool:
    return message.from_user.id == ALLOWED_USER_ID #–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–º–µ—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É


def build_report(posts):
    posts.reverse()
    intro = (
        "<b><i>üìù –ù–µ–¥–µ–ª—è –≤—ã–¥–∞–ª–∞—Å—å –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–π, –ø–æ—ç—Ç–æ–º—É –º—ã –ø—É–±–ª–∏–∫—É–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã, "
        "–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ª–µ–≥—á–µ –Ω–∞–π—Ç–∏ —Ç–æ, "
        "—á—Ç–æ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.</i></b>\n\n"
    )
    full_text = intro + "\n".join(posts)
    chunks = []
    buffer = ""
    for line in full_text.splitlines(keepends=True):
        if len(buffer) + len(line) > 4000:
            chunks.append(buffer)
            buffer = ""
        buffer += line
    if buffer:
        chunks.append(buffer)
    return chunks


async def collect_posts(date_start: datetime.date, date_end: datetime.date):
    await client.start()
    all_posts = []
    async for msg in client.iter_messages(SOURCE_CHANNEL):
        if not msg.date:
            continue
        msg_date = msg.date.date()
        if msg_date < date_start or msg_date > date_end:
            continue
        text = msg.message or getattr(msg, "text", "") or ""
        text = text.strip()
        if not text:
            continue
        preview = html.escape(text.splitlines()[0])
        link = f"https://t.me/{SOURCE_CHANNEL}/{msg.id}"
        all_posts.append(f"üìå {msg_date.strftime('%d.%m')} ‚Äî <a href='{link}'>{preview}</a>")
    return all_posts

@dp.message(Command("get_posts"))
async def get_posts(message: Message):

    if not is_authorized(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /get_posts 28.07 03.08")
        return
    try:
        date_start = datetime.strptime(args[1] + ".2025", "%d.%m.%Y").date()
        date_end = datetime.strptime(args[2] + ".2025", "%d.%m.%Y").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: 28.07 03.08")
        return

    await message.answer("üîç –ò—â—É –ø–æ—Å—Ç—ã...")
    posts = await collect_posts(date_start, date_end)
    if posts:
        for chunk in build_report(posts):
            await message.answer(chunk)
    else:
        await message.answer("–ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")


@dp.message(Command("schedule_report"))
async def schedule_report(message: Message):

    if not is_authorized(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    args = message.text.split()
    if len(args) != 4:
        await message.answer("–§–æ—Ä–º–∞—Ç: /schedule_report 03.08.2025 12:00 @–∫–∞–Ω–∞–ª")
        return
    try:
        run_time = datetime.strptime(args[1] + " " + args[2], "%d.%m.%Y %H:%M")
        channel_username = args[3].lstrip("@")
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.")
        return

    await message.answer(f"‚úÖ –û—Ç—á—ë—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ @{channel_username} {run_time.strftime('%d.%m.%Y %H:%M')}")
    asyncio.create_task(run_scheduled_report(run_time, channel_username))


async def run_scheduled_report(run_time: datetime, channel: str):
    await asyncio.sleep((run_time - datetime.now()).total_seconds())
    date_end = run_time.date()
    date_start = date_end - timedelta(days=6)
    posts = await collect_posts(date_start, date_end)
    if posts:
        for chunk in build_report(posts):
            await bot.send_message(chat_id=f"@{channel}", text=chunk)
    else:
        await bot.send_message(chat_id=f"@{channel}", text="–ü–æ—Å—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())