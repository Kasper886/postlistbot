import asyncio
import os
import re
import json
from dotenv import load_dotenv
from telethon.tl.types import Channel
import html
from datetime import datetime, timedelta
from typing import Union, Optional, List
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from telethon import TelegramClient
from telethon.sessions import StringSession
import pytz
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ==== –¢–í–û–ò –î–ê–ù–ù–´–ï ====
load_dotenv()

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
SOURCE_CHANNEL = os.getenv("SOURCE_CHANNEL")
ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID"))
# ======================

# === –¶–ï–õ–ï–í–û–ô –ö–ê–ù–ê–õ –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –û–¢–ß–Å–¢–ê ===
# –•—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ target_chat.json, –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –±–µ—Ä—ë—Ç—Å—è –∏–∑ .env (TARGET_CHAT) –∏–ª–∏ SOURCE_CHANNEL.
TARGET_CHAT_FILE = "target_chat.json"
TARGET_CHAT_RUNTIME: Optional[Union[int, str]] = None  # int (-100...) –∏–ª–∏ str('@username')

def parse_chat_ref(s: str) -> Union[int, str]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
      - @username
      - -1002783609929
      - 2783609929
      - https://t.me/c/2783609929/199
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - int –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö (-100...)
      - str('@username') –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö
    """
    s = s.strip()
    if s.startswith("@"):
        return s
    m = re.search(r"(?:https?://t\.me/c/)?(?:-100)?(\d{6,})", s)
    if m:
        return int("-100" + m.group(1))
    raise ValueError("–£–∫–∞–∂–∏—Ç–µ @username –∏–ª–∏ -100‚Ä¶/—Ü–∏—Ñ—Ä–æ–≤–æ–π ID/—Å—Å—ã–ª–∫—É t.me/c/...")

def load_target_chat_from_disk() -> Optional[Union[int, str]]:
    try:
        with open(TARGET_CHAT_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        return data.get("chat")
    except FileNotFoundError:
        return None
    except Exception:
        return None

def save_target_chat_to_disk(value: Union[int, str]) -> None:
    try:
        with open(TARGET_CHAT_FILE, "w", encoding="utf-8") as f:
            json.dump({"chat": value}, f, ensure_ascii=False, indent=2)
    except Exception:
        pass  # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

def init_target_chat():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞:
      1) —á–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞;
      2) –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –∏–∑ .env TARGET_CHAT;
      3) –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –∏–∑ SOURCE_CHANNEL.
    """
    global TARGET_CHAT_RUNTIME
    v = load_target_chat_from_disk()
    if v is not None:
        TARGET_CHAT_RUNTIME = v
        return
    raw = (os.getenv("TARGET_CHAT") or SOURCE_CHANNEL or "").strip()
    if raw:
        try:
            TARGET_CHAT_RUNTIME = parse_chat_ref(raw)
        except Exception:
            TARGET_CHAT_RUNTIME = None

def get_target_chat() -> Union[int, str]:
    if TARGET_CHAT_RUNTIME is None:
        raise RuntimeError("–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /set_target -100‚Ä¶ –∏–ª–∏ @username")
    return TARGET_CHAT_RUNTIME
# ============================================

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
client = TelegramClient(StringSession(os.environ["TELETHON_SESSION"]), API_ID, API_HASH)

def is_authorized(message: Message) -> bool:
    return message.from_user.id == ALLOWED_USER_ID  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–º–µ—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É

def build_report(posts: List[str]) -> List[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤, —Ä–∞–∑–±–∏–≤–∞—è —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç Telegram –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
    """
    posts.reverse()
    intro = (
    "<b>üìù–ù–µ–¥–µ–ª—è –≤—ã–¥–∞–ª–∞—Å—å –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–π, –ø–æ—ç—Ç–æ–º—É –º—ã –ø—É–±–ª–∏–∫—É–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã, "
    "–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ª–µ–≥—á–µ –Ω–∞–π—Ç–∏ —Ç–æ, "
    "—á—Ç–æ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.</b>\n\n"
    )
    
    full_text = intro + "\n".join(posts)
    chunks = []
    buffer = ""
    max_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    for line in full_text.splitlines(keepends=True):
        if len(buffer.encode('utf-8')) + len(line.encode('utf-8')) > max_length:
            chunks.append(buffer)
            buffer = ""
        buffer += line
    if buffer:
        chunks.append(buffer)
    return chunks

async def resolve_source_entity():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç entity –∫–∞–Ω–∞–ª–∞ –¥–ª—è Telethon.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - SOURCE_CHANNEL = -1002746218295 (Bot API —Ñ–æ—Ä–º–∞—Ç) -> 2746218295
    - SOURCE_CHANNEL = 2746218295 (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π id)
    - SOURCE_CHANNEL = @username (–¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ)
    - SOURCE_CHANNEL = https://t.me/c/2746218295/199 (–≤—ã—Ç–∞—â–∏—Ç 2746218295 –∏ –Ω–∞–π–¥—ë—Ç –ø–æ –¥–∏–∞–ª–æ–≥–∞–º)
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –∞–∫–∫–∞—É–Ω—Ç Telethon –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –≤ –∫–∞–Ω–∞–ª–µ.
    """
    await client.connect()
    if not await client.is_user_authorized(): raise RuntimeError("Session expired")
        
    src = (SOURCE_CHANNEL or "").strip()
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ username / –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π
    if src.startswith("@") or (src.startswith("https://t.me/") and "/c/" not in src):
        try:
            return await client.get_entity(src)
        except Exception:
            pass  # —É–ø–∞–¥—ë–º –≤ –ø–æ–∏—Å–∫ –ø–æ –¥–∏–∞–ª–æ–≥–∞–º –Ω–∏–∂–µ
    # –î–æ—Å—Ç–∞—ë–º —Ü–∏—Ñ—Ä–æ–≤–æ–π id –∏–∑ -100‚Ä¶, 2746‚Ä¶, –∏–ª–∏ t.me/c/2746‚Ä¶/123
    m = re.search(r'(?:-100)?(\d{6,})', src)  # –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ -100
    numeric_id = int(m.group(1)) if m else None
    if numeric_id:
        # –ò—â–µ–º —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å entity c access_hash
        async for d in client.iter_dialogs():
            e = d.entity
            if isinstance(e, Channel) and getattr(e, "id", None) == numeric_id:
                return e
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø–æ—á—Ç–∏ –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–∞–Ω–∞–ª–µ
        raise ValueError(
            f"–ê–∫–∫–∞—É–Ω—Ç Telethon –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–∞–Ω–∞–ª–µ id={numeric_id}. "
            f"–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ –∫–∞–Ω–∞–ª (–∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –≤—Ä—É—á–Ω—É—é –≤ Telegram –ø–æ–¥ —ç—Ç–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º), "
            f"—á—Ç–æ–±—ã Telethon –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å access_hash."
        )
    raise ValueError(
        "SOURCE_CHANNEL –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –£–∫–∞–∂–∏—Ç–µ @username, —Ü–∏—Ñ—Ä–æ–≤–æ–π ID (–±–µ–∑ -100) "
        "–∏–ª–∏ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞ https://t.me/c/<id>/<msg> –∏ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ –∫–∞–Ω–∞–ª."
    )

async def collect_posts(date_start: datetime.date, date_end: datetime.date, exclude_times: Optional[list] = None):
    moscow_tz = pytz.timezone("Europe/Moscow")
    await client.connect()
    if not await client.is_user_authorized(): raise RuntimeError("Session expired")
    all_posts = []

    # 1) –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
    try:
        entity = await resolve_source_entity()
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª: {e}")
        return []

    # 2) –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    async for msg in client.iter_messages(entity):
        if not msg.date:
            continue

        msg_datetime = msg.date.astimezone(moscow_tz)
        msg_date = msg_datetime.date()
        if not (date_start <= msg_date <= date_end):
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        if exclude_times:
            msg_time = msg_datetime.strftime("%H:%M")
            if msg_time in exclude_times:
                continue

        text = (msg.message or getattr(msg, "text", "") or "").strip()
        if not text:
            continue

        preview = html.escape(text.splitlines()[0])

        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: https://t.me/c/<channel_id>/<msg_id>
        channel_id = None
        if getattr(msg, "peer_id", None) and getattr(msg.peer_id, "channel_id", None):
            channel_id = msg.peer_id.channel_id
        else:
            channel_id = getattr(entity, "id", None)

        link = f"https://t.me/c/{channel_id}/{msg.id}"
        all_posts.append(f"üìå {msg_date.strftime('%d.%m')} ‚Äî <a href='{link}'>{preview}</a>")

    return all_posts

@dp.message(Command("set_source"))
async def set_source(message: Message):
    if not is_authorized(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:\n"
            "- /set_source -1002783609929\n"
            "- /set_source @username\n"
            "- /set_source https://t.me/c/2783609929/199"
        )
        return

    raw = parts[1].strip()
    try:
        new_source = parse_chat_ref(raw)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {e}")
        return

    global SOURCE_CHANNEL_RUNTIME
    SOURCE_CHANNEL_RUNTIME = new_source
    save_source_channel_to_disk(new_source)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª/–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    await message.answer(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_source}.")

def save_source_channel_to_disk(value: Union[int, str]) -> None:
    try:
        with open("source_channel.json", "w", encoding="utf-8") as f:
            json.dump({"source": value}, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

@dp.message(Command("get_posts"))
async def get_posts(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä exclude_time.
    –§–æ—Ä–º–∞—Ç: /get_posts 28.07 03.08 [exclude_time 09:00,15:00]
    """
    if not is_authorized(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    args = message.text.split()
    exclude_times = None

    if len(args) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /get_posts 28.07 03.08 [exclude_time HH:MM,HH:MM]")
        return

    current_year = datetime.now().year
    try:
        date_start = datetime.strptime(args[1] + f".{current_year}", "%d.%m.%Y").date()
        date_end = datetime.strptime(args[2] + f".{current_year}", "%d.%m.%Y").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: 28.07 03.08")
        return

    if date_start > date_end:
        await message.answer("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    if len(args) > 3 and args[3].lower() == "exclude_time":
        if len(args) != 5:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM,HH:MM")
            return
        try:
            times = args[4].split(",")
            exclude_times = []
            for t in times:
                t = t.strip()
                datetime.strptime(t, "%H:%M")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
                exclude_times.append(t)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π: HH:MM,HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00,15:00)")
            return

    await message.answer("üîç –ò—â—É –ø–æ—Å—Ç—ã...")
    posts = await collect_posts(date_start, date_end, exclude_times)
    if posts:
        for chunk in build_report(posts):
            await message.answer(chunk)
    else:
        await message.answer("–ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")

@dp.message(Command("schedule_report"))
async def schedule_report(message):
    # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    parts = message.text.strip().split(" ")
    if len(parts) < 3:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /schedule_report DD.MM.YYYY DD.MM.YYYY exclude_time HH:MM,HH:MM")
        return
    
    try:
        # –ß—Ç–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç —Å –∫–æ–Ω—Ü–∞
        current_year = datetime.now().year
        date_start = datetime.strptime(parts[1] + f".{current_year}", "%d.%m.%Y").date()
        date_end = datetime.strptime(parts[2] + f".{current_year}", "%d.%m.%Y").date()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY.")
        return

    exclude_times = None
    if len(parts) >= 5 and parts[3].lower() == "exclude_time":
        # –ü–∞—Ä—Å–∏–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        try:
            exclude_times = [t.strip() for t in parts[4].split(",")]
            for t in exclude_times:
                datetime.strptime(t, "%H:%M")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM,HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00,15:30).")
            return

    # –í—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ —Ä–µ–ª–∏–∑–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
    print(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {date_start}, –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {date_end}, –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞: {exclude_times}")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    if date_start > date_end:
        await message.answer("‚ùó –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    run_time = datetime.now()  # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ - –∏–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ
    target_chat = get_target_chat() #id —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ—Ç—á–µ—Ç
    asyncio.create_task(run_scheduled_report(run_time, target_chat, date_start, date_end, exclude_times))
    await message.answer("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!")

@dp.message(Command("set_target"))
async def set_target(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤.
    –§–æ—Ä–º–∞—Ç: /set_target -1002783609929 –∏–ª–∏ /set_target @username
    """
    if not is_authorized(message):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª/—á–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n"
            "- /set_target -1002783609929\n"
            "- /set_target @username\n"
            "- /set_target https://t.me/c/2783609929/199"
        )
        return

    raw = parts[1].strip()
    try:
        new_target = parse_chat_ref(raw)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ –∏–º–µ—Ç—å –ø—Ä–∞–≤–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
    try:
        chat = await bot.get_chat(new_target)
    except Exception as e:
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É/–∫–∞–Ω–∞–ª—É. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. "
            f"–î–µ—Ç–∞–ª–∏: {e}"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    global TARGET_CHAT_RUNTIME
    TARGET_CHAT_RUNTIME = new_target
    save_target_chat_to_disk(new_target)

    title = getattr(chat, "title", None) or getattr(chat, "full_name", "—á–∞—Ç")
    await message.answer(f"‚úÖ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {title} (id={new_target})")

async def run_scheduled_report(run_time: datetime, target_chat: Union[int, str], date_start: datetime.date, date_end: datetime.date, exclude_times: Optional[list] = None):
    from datetime import timezone
    utc_now = datetime.now(timezone.utc)
    sleep_duration = (run_time.astimezone(timezone.utc) - utc_now).total_seconds()
    if sleep_duration > 0:
        await asyncio.sleep(sleep_duration)

    posts = await collect_posts(date_start, date_end, exclude_times)

    try:
        if posts:
            for chunk in build_report(posts):
                await bot.send_message(chat_id=target_chat, text=chunk, disable_web_page_preview=True)
        else:
            await bot.send_message(chat_id=target_chat, text="–ü–æ—Å—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", disable_web_page_preview=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")
        await bot.send_message(chat_id=ALLOWED_USER_ID, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    init_target_chat()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
